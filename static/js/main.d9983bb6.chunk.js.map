{"version":3,"sources":["NeuroglancerViewer.js","InformationPanel.js","App.js","reportWebVitals.js","index.js"],"names":["NeuroglancerViewer","forwardRef","props","ref","useEffect","console","log","setID","id","style","minHeight","height","className","menuFocus","filePath","seamless","sandbox","title","src","border","width","InformationPanel","useState","inputFileAndID","setInputFileAndID","fileList","setFileList","fileData","setFileData","proteinData","setProteomics","size","undefined","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","menuRef","useRef","iframeRef","createRef","setMenuFocus","fetchstring","process","fetch","headers","Accept","then","response","json","data","document","handleMouseClick","event","target","focus","removeFocus","onMouseEnter","onMouseLeave","fileCallback","newFile","obj","inputFile","DataPanelSection","selectRef","onChange","current","value","Object","keys","map","file","i","unit","description","ProteomicsPanelSection","protein","name","num","probability","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d9983bb6.chunk.js","sourcesContent":["/*https://viz.neurodata.io/#!%7B%22dimensions%22:%7B%22x%22:%5B0.000003363538%2C%22m%22%5D%2C%22y%22:%5B0.0000032511860000000004%2C%22m%22%5D%2C%22z%22:%5B0.000001313114%2C%22m%22%5D%7D%2C%22\r\nposition%22:%5B995.503662109375%2C975.8992309570312%2C360.5%5D%2C%22crossSectionScale%22:7.389056098930651%2C%22projectionOrientation%22:%5B0%2C0.0021816599182784557%2C0%2C0.999997615814209%5D%2C%22\r\nprojectionScale%22:8192%2C%22layers%22:%5B%7B%22type%22:%22image%22%2C%22source%22:%22precomputed://gs://publiccave2.appspot.com/8bit_big%22%2C%22tab%22:%22source%22%2C%22name%22:%228bit_big%22%7D%2C%7B%22\r\ntype%22:%22annotation%22%2C%22source%22:%22precomputed://gs://publiccave2.appspot.com/nucleosomes%22%2C%22tab%22:%22\r\nsource%22%2C%22name%22:%22Nucleosomes%22%7D%2C%7B%22type%22:%22annotation%22%2C%22source%22:%22precomputed://gs://publiccave2.appspot.com/ribosomes%22%2C%22tab%22:%22source%22%2C%22\r\nannotationColor%22:%22#0400ff%22%2C%22name%22:%22ribosomes%22%7D%2C%7B%22type%22:%22annotation%22%2C%22source%22:%7B%22url%22:%22local://annotations%22%2C%22transform%22:%7B%22\r\noutputDimensions%22:%7B%22x%22:%5B0.000003363538%2C%22m%22%5D%2C%22y%22:%5B0.0000032511860000000004%2C%22m%22%5D%2C%22z%22:%5B0.000001313114%2C%22m%22%5D%7D%7D%7D%2C%22tool%22:%22\r\nannotateSphere%22%2C%22annotationColor%22:%22#ff00f7%22%2C%22annotations%22:%5B%7B%22center%22:%5B652%2C1067%2C312%5D%2C%22radii%22:%5B133.76177978515625%2C96.955810546875%2C48.503387451171875%5D%2C%22\r\ntype%22:%22ellipsoid%22%2C%22id%22:%2259086a370294538ae4b6e4cb371ea9c2f20571ca%22%2C%22description%22:%22Pink%20blob%5Cn%22%7D%5D%2C%22name%22:%22new%20layer%22%7D%5D%2C%22selectedLayer%22:%7B%22\r\nlayer%22:%22new%20layer%22%2C%22visible%22:true%7D%2C%22layout%22:%22xy-3d%22%2C%22selection%22:%7B%22layers%22:%7B%22new%20layer%22:%7B%22annotationId%22:%2259086a370294538ae4b6e4cb371ea9c2f20571ca%22%2C%22\r\nannotationSource%22:0%2C%22annotationSubsource%22:%22default%22%7D%7D%7D%2C%22partialViewport%22:%5B0%2C0%2C1%2C1%5D%7D*/\r\n\r\nimport React, { Fragment, forwardRef, useEffect } from 'react';\r\n\r\nexport const NeuroglancerViewer = forwardRef((props, ref) => {\r\n\r\n    useEffect(() => {\r\n        console.log(props.setID)\r\n    }, [props.setID])\r\n\r\n    return (\r\n  \r\n         \r\n            <div id=\"vis-panel\" style={{ minHeight: props.height }} className={props.menuFocus ? \"noInteraction\" : \"\"}>\r\n                {props.filePath ?\r\n                    <Fragment>\r\n                        <h3>Showing <span className=\"fileNameString\">{props.setID} </span></h3>\r\n                        <span> Press [h] to view controls</span>\r\n                        <iframe ref={ref} seamless sandbox=\"allow-same-origin allow-scripts allow-downloads\" title=\"Neuroglancer Viewer\" id=\"frame1\" className={`\"resized\" ${props.menuFocus ? \"noInteraction\" : \"\"}`} src={props.filePath} style={{ border: 'none', width: '100%', height: '100%', minHeight: props.height - 100 }}>\r\n                        </iframe>\r\n                    </Fragment>\r\n                    :\r\n                    <div className=\"selectPrompt\"> Please select a file </div>\r\n                }\r\n            </div>\r\n \r\n    )\r\n\r\n\r\n\r\n})","import React, { useRef, createRef, useState, useEffect } from 'react';\r\n\r\nimport {NeuroglancerViewer} from './NeuroglancerViewer.js'\r\nimport { VisViewer } from './VisViewer.js'\r\nexport const InformationPanel = () => {\r\n    const [inputFileAndID, setInputFileAndID] = useState([])\r\n    const [fileList, setFileList] = useState([])\r\n    const [fileData, setFileData] = useState()\r\n    const [proteinData, setProteomics] = useState()\r\n    const size = useWindowSize();\r\n    const menuRef = useRef()\r\n    const iframeRef = createRef()\r\n    const [menuFocus,setMenuFocus] = useState(true)\r\n\r\n    useEffect(() => {\r\n        //fetches a list of files to display for the user for selection. in the database, there will probably be a job to run to create a file, or several if several sources, like this as well.\r\n        // currently these are just testing files located in the public folder.\r\n\r\n        let fetchstring = process.env.PUBLIC_URL + '/data/Neuroglancer/idToUrlmapping.json';\r\n        console.log('Fetching ' + fetchstring);\r\n        fetch(fetchstring, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }).then(response => response.json())\r\n            .then(data => \r\n                setFileList(data))\r\n        \r\n\r\n        //register mouseclick tracker\r\n            document.addEventListener('mousedown',handleMouseClick)\r\n    }, []) //does this only once on load\r\n\r\n    const handleMouseClick = (event) => {\r\n        console.log(event.target)\r\n        event.target.focus()\r\n    }\r\n    const setFocus = () => {\r\n       \r\n        setMenuFocus(true)\r\n    }\r\n\r\n    const removeFocus=() => {\r\n        setMenuFocus(false)\r\n    }\r\n    const changeInputFile = (newFile) => {\r\n        console.log(newFile)\r\n        let obj = fileList[newFile]\r\n        //set the new file data\r\n        setFileData(obj)\r\n        setInputFileAndID([newFile,obj[\"url\"]])\r\n        removeFocus()\r\n\r\n        //load the proteomics data\r\n        let fetchstring = process.env.PUBLIC_URL + '/data/proteomics/' + newFile + \".json\";  //loads the available data for the file, with the matching name --- should probably be a unique ID instead!\r\n        fetch(fetchstring, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }).then(response => response.json())\r\n            .then(data => setProteomics(data));\r\n    }\r\n\r\n    return (\r\n        <div id=\"root\" className=\"flex\">\r\n            <div id=\"menu\"  ref={menuRef}  onMouseEnter={setFocus} onMouseLeave={removeFocus}>\r\n                <DataPanelSection fileList={fileList} fileCallback={changeInputFile} inputFile={inputFileAndID[1]} fileData={fileData} />\r\n                <ProteomicsPanelSection proteinData={proteinData} />\r\n\r\n            </div>\r\n            {/*<VisViewer filePath={inputFile} height={size.height} /> */}\r\n            <NeuroglancerViewer menuFocus={menuFocus}  ref={iframeRef} setID={inputFileAndID[0]} filePath ={inputFileAndID[1]} height={size.height} />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n  }\r\n\r\nconst DataPanelSection = ({ fileList, fileCallback, fileData }) => {\r\n\r\n\r\n    const selectRef = useRef();\r\n    const onChange = () => {\r\n        //console.log(selectRef.current.value)\r\n        fileCallback(selectRef.current.value)\r\n    }\r\n\r\n    return (\r\n        <aside className=\"infoPanelSection\">\r\n            <h3>File</h3>\r\n\r\n            <select\r\n                className=\"dropdown-medium\"\r\n\r\n                onChange={onChange}\r\n                ref={selectRef}\r\n            >\r\n                {Object.keys(fileList).map((file, i) => (\r\n                    <option key={'file' + i} value={file}>\r\n                        {file}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {fileData ?\r\n                <section id=\"fileInfo\">\r\n                    <div className=\"attributeRow\">\r\n                        <span className=\"attributeLabel\">File Size</span>\r\n                        <span className=\"attributeValue\">{fileData.size} {fileData.unit} </span>\r\n                    </div>\r\n                    {fileData.description ?\r\n                        <div className=\"attributeRow\">\r\n                            <span className=\"attributeLabel\"> Description </span>\r\n                            <span className=\"attributeValue\">{fileData.description} </span>\r\n                        </div>\r\n                        : \"\"}\r\n\r\n                </section>\r\n                : \"\"}\r\n        </aside>\r\n    )\r\n}\r\n\r\nconst ProteomicsPanelSection = ({ proteinData }) => {\r\n    return (\r\n        <aside className=\"infoPanelSection\">\r\n            <h3>Proteomics</h3>\r\n            {proteinData ?\r\n                <table className=\"proteinList\">\r\n                     <thead>\r\n                    <tr><th>Protein</th><th>#</th><th>Probability</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {proteinData.map((protein, i) => (\r\n\r\n                       <tr className=\"proteinListElement\" key={'file' + i} value={protein.name}>\r\n                                <td>{protein.name}</td>\r\n                                <td>{protein.num}</td>\r\n                                <td>{protein.probability}</td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n                : \"\"}\r\n        </aside>\r\n    )\r\n}","\nimport './App.css';\n\nimport React from 'react';\n\nimport {InformationPanel} from './InformationPanel.js'\n\nfunction App() {\n  return (\n   \n      <InformationPanel />\n      \n\n \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}